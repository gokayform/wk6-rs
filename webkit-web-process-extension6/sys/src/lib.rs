// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from webkit-gir-files
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(
    clippy::approx_constant,
    clippy::type_complexity,
    clippy::unreadable_literal,
    clippy::upper_case_acronyms
)]
#![cfg_attr(docsrs, feature(doc_cfg))]

#[allow(unused_imports)]
use libc::{
    c_char, c_double, c_float, c_int, c_long, c_short, c_uchar, c_uint, c_ulong, c_ushort, c_void,
    intptr_t, size_t, ssize_t, uintptr_t, FILE,
};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type WebKitContextMenuAction = c_int;
pub const WEBKIT_CONTEXT_MENU_ACTION_NO_ACTION: WebKitContextMenuAction = 0;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK: WebKitContextMenuAction = 1;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK_IN_NEW_WINDOW: WebKitContextMenuAction = 2;
pub const WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_LINK_TO_DISK: WebKitContextMenuAction = 3;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY_LINK_TO_CLIPBOARD: WebKitContextMenuAction = 4;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_IMAGE_IN_NEW_WINDOW: WebKitContextMenuAction = 5;
pub const WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_IMAGE_TO_DISK: WebKitContextMenuAction = 6;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_TO_CLIPBOARD: WebKitContextMenuAction = 7;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_URL_TO_CLIPBOARD: WebKitContextMenuAction = 8;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_FRAME_IN_NEW_WINDOW: WebKitContextMenuAction = 9;
pub const WEBKIT_CONTEXT_MENU_ACTION_GO_BACK: WebKitContextMenuAction = 10;
pub const WEBKIT_CONTEXT_MENU_ACTION_GO_FORWARD: WebKitContextMenuAction = 11;
pub const WEBKIT_CONTEXT_MENU_ACTION_STOP: WebKitContextMenuAction = 12;
pub const WEBKIT_CONTEXT_MENU_ACTION_RELOAD: WebKitContextMenuAction = 13;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY: WebKitContextMenuAction = 14;
pub const WEBKIT_CONTEXT_MENU_ACTION_CUT: WebKitContextMenuAction = 15;
pub const WEBKIT_CONTEXT_MENU_ACTION_PASTE: WebKitContextMenuAction = 16;
pub const WEBKIT_CONTEXT_MENU_ACTION_DELETE: WebKitContextMenuAction = 17;
pub const WEBKIT_CONTEXT_MENU_ACTION_SELECT_ALL: WebKitContextMenuAction = 18;
pub const WEBKIT_CONTEXT_MENU_ACTION_INPUT_METHODS: WebKitContextMenuAction = 19;
pub const WEBKIT_CONTEXT_MENU_ACTION_UNICODE: WebKitContextMenuAction = 20;
pub const WEBKIT_CONTEXT_MENU_ACTION_SPELLING_GUESS: WebKitContextMenuAction = 21;
pub const WEBKIT_CONTEXT_MENU_ACTION_NO_GUESSES_FOUND: WebKitContextMenuAction = 22;
pub const WEBKIT_CONTEXT_MENU_ACTION_IGNORE_SPELLING: WebKitContextMenuAction = 23;
pub const WEBKIT_CONTEXT_MENU_ACTION_LEARN_SPELLING: WebKitContextMenuAction = 24;
pub const WEBKIT_CONTEXT_MENU_ACTION_IGNORE_GRAMMAR: WebKitContextMenuAction = 25;
pub const WEBKIT_CONTEXT_MENU_ACTION_FONT_MENU: WebKitContextMenuAction = 26;
pub const WEBKIT_CONTEXT_MENU_ACTION_BOLD: WebKitContextMenuAction = 27;
pub const WEBKIT_CONTEXT_MENU_ACTION_ITALIC: WebKitContextMenuAction = 28;
pub const WEBKIT_CONTEXT_MENU_ACTION_UNDERLINE: WebKitContextMenuAction = 29;
pub const WEBKIT_CONTEXT_MENU_ACTION_OUTLINE: WebKitContextMenuAction = 30;
pub const WEBKIT_CONTEXT_MENU_ACTION_INSPECT_ELEMENT: WebKitContextMenuAction = 31;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_VIDEO_IN_NEW_WINDOW: WebKitContextMenuAction = 32;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_AUDIO_IN_NEW_WINDOW: WebKitContextMenuAction = 33;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY_VIDEO_LINK_TO_CLIPBOARD: WebKitContextMenuAction = 34;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY_AUDIO_LINK_TO_CLIPBOARD: WebKitContextMenuAction = 35;
pub const WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_CONTROLS: WebKitContextMenuAction = 36;
pub const WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_LOOP: WebKitContextMenuAction = 37;
pub const WEBKIT_CONTEXT_MENU_ACTION_ENTER_VIDEO_FULLSCREEN: WebKitContextMenuAction = 38;
pub const WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PLAY: WebKitContextMenuAction = 39;
pub const WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PAUSE: WebKitContextMenuAction = 40;
pub const WEBKIT_CONTEXT_MENU_ACTION_MEDIA_MUTE: WebKitContextMenuAction = 41;
pub const WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_VIDEO_TO_DISK: WebKitContextMenuAction = 42;
pub const WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_AUDIO_TO_DISK: WebKitContextMenuAction = 43;
pub const WEBKIT_CONTEXT_MENU_ACTION_INSERT_EMOJI: WebKitContextMenuAction = 44;
pub const WEBKIT_CONTEXT_MENU_ACTION_PASTE_AS_PLAIN_TEXT: WebKitContextMenuAction = 45;
pub const WEBKIT_CONTEXT_MENU_ACTION_CUSTOM: WebKitContextMenuAction = 10000;

pub type WebKitUserMessageError = c_int;
pub const WEBKIT_USER_MESSAGE_UNHANDLED_MESSAGE: WebKitUserMessageError = 0;

// Flags
pub type WebKitHitTestResultContext = c_uint;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_DOCUMENT: WebKitHitTestResultContext = 2;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK: WebKitHitTestResultContext = 4;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE: WebKitHitTestResultContext = 8;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA: WebKitHitTestResultContext = 16;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE: WebKitHitTestResultContext = 32;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_SCROLLBAR: WebKitHitTestResultContext = 64;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION: WebKitHitTestResultContext = 128;

// Callbacks
pub type WebKitWebProcessExtensionInitializeFunction =
    Option<unsafe extern "C" fn(*mut WebKitWebProcessExtension)>;
pub type WebKitWebProcessExtensionInitializeWithUserDataFunction =
    Option<unsafe extern "C" fn(*mut WebKitWebProcessExtension, *const glib::GVariant)>;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitContextMenuClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitContextMenuClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitContextMenuClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitContextMenuItemClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
}

impl ::std::fmt::Debug for WebKitContextMenuItemClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitContextMenuItemClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitFrameClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitFrameClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFrameClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitHitTestResultClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitHitTestResultClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitHitTestResultClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitScriptWorldClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitScriptWorldClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitScriptWorldClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitURIRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitURIRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURIRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitURIResponseClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitURIResponseClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURIResponseClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitUserMessageClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
}

impl ::std::fmt::Debug for WebKitUserMessageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserMessageClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebEditorClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebEditorClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebEditorClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebFormManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebFormManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebFormManagerClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebHitTestResultClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebHitTestResultClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebHitTestResultClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebPageClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebPageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebPageClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebProcessExtensionClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebProcessExtensionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebProcessExtensionClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

// Classes
#[repr(C)]
pub struct WebKitContextMenu {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitContextMenu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitContextMenu @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct WebKitContextMenuItem {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitContextMenuItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitContextMenuItem @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct WebKitFrame {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitFrame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFrame @ {self:p}")).finish()
    }
}

#[repr(C)]
pub struct WebKitHitTestResult {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitHitTestResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitHitTestResult @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct WebKitScriptWorld {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitScriptWorld {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitScriptWorld @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct WebKitURIRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitURIRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURIRequest @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct WebKitURIResponse {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitURIResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURIResponse @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct WebKitUserMessage {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitUserMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserMessage @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct WebKitWebEditor {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebEditor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebEditor @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebFormManager {
    pub parent: gobject::GObject,
}

impl ::std::fmt::Debug for WebKitWebFormManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebFormManager @ {self:p}"))
            .field("parent", &self.parent)
            .finish()
    }
}

#[repr(C)]
pub struct WebKitWebHitTestResult {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebHitTestResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebHitTestResult @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct WebKitWebPage {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebPage @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct WebKitWebProcessExtension {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebProcessExtension {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebProcessExtension @ {self:p}"))
            .finish()
    }
}

#[link(name = "webkitgtk-6.0")]
#[link(name = "javascriptcoregtk-6.0")]
extern "C" {

    //=========================================================================
    // WebKitContextMenu
    //=========================================================================
    pub fn webkit_context_menu_get_type() -> GType;
    pub fn webkit_context_menu_new() -> *mut WebKitContextMenu;
    pub fn webkit_context_menu_new_with_items(items: *mut glib::GList) -> *mut WebKitContextMenu;
    pub fn webkit_context_menu_append(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
    );
    pub fn webkit_context_menu_first(menu: *mut WebKitContextMenu) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_get_event(menu: *mut WebKitContextMenu) -> *mut gdk::GdkEvent;
    pub fn webkit_context_menu_get_item_at_position(
        menu: *mut WebKitContextMenu,
        position: c_uint,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_get_items(menu: *mut WebKitContextMenu) -> *mut glib::GList;
    pub fn webkit_context_menu_get_n_items(menu: *mut WebKitContextMenu) -> c_uint;
    pub fn webkit_context_menu_get_user_data(menu: *mut WebKitContextMenu) -> *mut glib::GVariant;
    pub fn webkit_context_menu_insert(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
        position: c_int,
    );
    pub fn webkit_context_menu_last(menu: *mut WebKitContextMenu) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_move_item(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
        position: c_int,
    );
    pub fn webkit_context_menu_prepend(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
    );
    pub fn webkit_context_menu_remove(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
    );
    pub fn webkit_context_menu_remove_all(menu: *mut WebKitContextMenu);
    pub fn webkit_context_menu_set_user_data(
        menu: *mut WebKitContextMenu,
        user_data: *mut glib::GVariant,
    );

    //=========================================================================
    // WebKitContextMenuItem
    //=========================================================================
    pub fn webkit_context_menu_item_get_type() -> GType;
    pub fn webkit_context_menu_item_new_from_gaction(
        action: *mut gio::GAction,
        label: *const c_char,
        target: *mut glib::GVariant,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_new_from_stock_action(
        action: WebKitContextMenuAction,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_new_from_stock_action_with_label(
        action: WebKitContextMenuAction,
        label: *const c_char,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_new_separator() -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_new_with_submenu(
        label: *const c_char,
        submenu: *mut WebKitContextMenu,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_get_gaction(
        item: *mut WebKitContextMenuItem,
    ) -> *mut gio::GAction;
    pub fn webkit_context_menu_item_get_stock_action(
        item: *mut WebKitContextMenuItem,
    ) -> WebKitContextMenuAction;
    pub fn webkit_context_menu_item_get_submenu(
        item: *mut WebKitContextMenuItem,
    ) -> *mut WebKitContextMenu;
    pub fn webkit_context_menu_item_is_separator(item: *mut WebKitContextMenuItem) -> gboolean;
    pub fn webkit_context_menu_item_set_submenu(
        item: *mut WebKitContextMenuItem,
        submenu: *mut WebKitContextMenu,
    );

    //=========================================================================
    // WebKitFrame
    //=========================================================================
    pub fn webkit_frame_get_type() -> GType;
    pub fn webkit_frame_get_id(frame: *mut WebKitFrame) -> u64;
    pub fn webkit_frame_get_js_context(frame: *mut WebKitFrame) -> *mut javascriptcore::JSCContext;
    pub fn webkit_frame_get_js_context_for_script_world(
        frame: *mut WebKitFrame,
        world: *mut WebKitScriptWorld,
    ) -> *mut javascriptcore::JSCContext;
    pub fn webkit_frame_get_uri(frame: *mut WebKitFrame) -> *const c_char;
    pub fn webkit_frame_is_main_frame(frame: *mut WebKitFrame) -> gboolean;

    //=========================================================================
    // WebKitHitTestResult
    //=========================================================================
    pub fn webkit_hit_test_result_get_type() -> GType;
    pub fn webkit_hit_test_result_context_is_editable(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_image(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_link(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_media(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_scrollbar(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_selection(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_get_context(hit_test_result: *mut WebKitHitTestResult) -> c_uint;
    pub fn webkit_hit_test_result_get_image_uri(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;
    pub fn webkit_hit_test_result_get_link_label(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;
    pub fn webkit_hit_test_result_get_link_title(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;
    pub fn webkit_hit_test_result_get_link_uri(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;
    pub fn webkit_hit_test_result_get_media_uri(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;

    //=========================================================================
    // WebKitScriptWorld
    //=========================================================================
    pub fn webkit_script_world_get_type() -> GType;
    pub fn webkit_script_world_new() -> *mut WebKitScriptWorld;
    pub fn webkit_script_world_new_with_name(name: *const c_char) -> *mut WebKitScriptWorld;
    pub fn webkit_script_world_get_default() -> *mut WebKitScriptWorld;
    pub fn webkit_script_world_get_name(world: *mut WebKitScriptWorld) -> *const c_char;

    //=========================================================================
    // WebKitURIRequest
    //=========================================================================
    pub fn webkit_uri_request_get_type() -> GType;
    pub fn webkit_uri_request_new(uri: *const c_char) -> *mut WebKitURIRequest;
    pub fn webkit_uri_request_get_http_headers(
        request: *mut WebKitURIRequest,
    ) -> *mut soup::SoupMessageHeaders;
    pub fn webkit_uri_request_get_http_method(request: *mut WebKitURIRequest) -> *const c_char;
    pub fn webkit_uri_request_get_uri(request: *mut WebKitURIRequest) -> *const c_char;
    pub fn webkit_uri_request_set_uri(request: *mut WebKitURIRequest, uri: *const c_char);

    //=========================================================================
    // WebKitURIResponse
    //=========================================================================
    pub fn webkit_uri_response_get_type() -> GType;
    pub fn webkit_uri_response_get_content_length(response: *mut WebKitURIResponse) -> u64;
    pub fn webkit_uri_response_get_http_headers(
        response: *mut WebKitURIResponse,
    ) -> *mut soup::SoupMessageHeaders;
    pub fn webkit_uri_response_get_mime_type(response: *mut WebKitURIResponse) -> *const c_char;
    pub fn webkit_uri_response_get_status_code(response: *mut WebKitURIResponse) -> c_uint;
    pub fn webkit_uri_response_get_suggested_filename(
        response: *mut WebKitURIResponse,
    ) -> *const c_char;
    pub fn webkit_uri_response_get_uri(response: *mut WebKitURIResponse) -> *const c_char;

    //=========================================================================
    // WebKitUserMessage
    //=========================================================================
    pub fn webkit_user_message_get_type() -> GType;
    pub fn webkit_user_message_new(
        name: *const c_char,
        parameters: *mut glib::GVariant,
    ) -> *mut WebKitUserMessage;
    pub fn webkit_user_message_new_with_fd_list(
        name: *const c_char,
        parameters: *mut glib::GVariant,
        fd_list: *mut gio::GUnixFDList,
    ) -> *mut WebKitUserMessage;
    pub fn webkit_user_message_error_quark() -> glib::GQuark;
    pub fn webkit_user_message_get_fd_list(
        message: *mut WebKitUserMessage,
    ) -> *mut gio::GUnixFDList;
    pub fn webkit_user_message_get_name(message: *mut WebKitUserMessage) -> *const c_char;
    pub fn webkit_user_message_get_parameters(
        message: *mut WebKitUserMessage,
    ) -> *mut glib::GVariant;
    pub fn webkit_user_message_send_reply(
        message: *mut WebKitUserMessage,
        reply: *mut WebKitUserMessage,
    );

    //=========================================================================
    // WebKitWebEditor
    //=========================================================================
    pub fn webkit_web_editor_get_type() -> GType;
    pub fn webkit_web_editor_get_page(editor: *mut WebKitWebEditor) -> *mut WebKitWebPage;

    //=========================================================================
    // WebKitWebFormManager
    //=========================================================================
    pub fn webkit_web_form_manager_get_type() -> GType;
    pub fn webkit_web_form_manager_input_element_auto_fill(
        element: *mut javascriptcore::JSCValue,
        value: *const c_char,
    );
    pub fn webkit_web_form_manager_input_element_is_auto_filled(
        element: *mut javascriptcore::JSCValue,
    ) -> gboolean;
    pub fn webkit_web_form_manager_input_element_is_user_edited(
        element: *mut javascriptcore::JSCValue,
    ) -> gboolean;

    //=========================================================================
    // WebKitWebHitTestResult
    //=========================================================================
    pub fn webkit_web_hit_test_result_get_type() -> GType;
    pub fn webkit_web_hit_test_result_context_is_editable(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> gboolean;
    pub fn webkit_web_hit_test_result_context_is_image(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> gboolean;
    pub fn webkit_web_hit_test_result_context_is_link(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> gboolean;
    pub fn webkit_web_hit_test_result_context_is_media(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> gboolean;
    pub fn webkit_web_hit_test_result_context_is_scrollbar(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> gboolean;
    pub fn webkit_web_hit_test_result_context_is_selection(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> gboolean;
    pub fn webkit_web_hit_test_result_get_context(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> c_uint;
    pub fn webkit_web_hit_test_result_get_image_uri(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> *const c_char;
    pub fn webkit_web_hit_test_result_get_js_node(
        web_hit_test_result: *mut WebKitWebHitTestResult,
        world: *mut WebKitScriptWorld,
    ) -> *mut javascriptcore::JSCValue;
    pub fn webkit_web_hit_test_result_get_link_label(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> *const c_char;
    pub fn webkit_web_hit_test_result_get_link_title(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> *const c_char;
    pub fn webkit_web_hit_test_result_get_link_uri(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> *const c_char;
    pub fn webkit_web_hit_test_result_get_media_uri(
        web_hit_test_result: *mut WebKitWebHitTestResult,
    ) -> *const c_char;

    //=========================================================================
    // WebKitWebPage
    //=========================================================================
    pub fn webkit_web_page_get_type() -> GType;
    pub fn webkit_web_page_get_editor(web_page: *mut WebKitWebPage) -> *mut WebKitWebEditor;
    pub fn webkit_web_page_get_form_manager(
        web_page: *mut WebKitWebPage,
        world: *mut WebKitScriptWorld,
    ) -> *mut WebKitWebFormManager;
    pub fn webkit_web_page_get_id(web_page: *mut WebKitWebPage) -> u64;
    pub fn webkit_web_page_get_main_frame(web_page: *mut WebKitWebPage) -> *mut WebKitFrame;
    pub fn webkit_web_page_get_uri(web_page: *mut WebKitWebPage) -> *const c_char;
    pub fn webkit_web_page_send_message_to_view(
        web_page: *mut WebKitWebPage,
        message: *mut WebKitUserMessage,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_web_page_send_message_to_view_finish(
        web_page: *mut WebKitWebPage,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut WebKitUserMessage;

    //=========================================================================
    // WebKitWebProcessExtension
    //=========================================================================
    pub fn webkit_web_process_extension_get_type() -> GType;
    pub fn webkit_web_process_extension_get_page(
        extension: *mut WebKitWebProcessExtension,
        page_id: u64,
    ) -> *mut WebKitWebPage;
    pub fn webkit_web_process_extension_send_message_to_context(
        extension: *mut WebKitWebProcessExtension,
        message: *mut WebKitUserMessage,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_web_process_extension_send_message_to_context_finish(
        extension: *mut WebKitWebProcessExtension,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut WebKitUserMessage;

}
