// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from webkit-gir-files
// DO NOT EDIT

#![cfg(unix)]

use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::mem::{align_of, size_of};
use std::path::Path;
use std::process::Command;
use std::str;
use tempfile::Builder;
use webkit_web_process_extension6_sys::*;

static PACKAGES: &[&str] = &["webkitgtk-web-process-extension-6.0"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {cmd:?} failed, {status}").into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{name} {err}").into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG").unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {cmd:?} returned {}", out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {rust_name}\nRust: {rust_value:?}\nC:    {c_value:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!("Layout mismatch for {rust_name}\nRust: {rust_layout:?}\nC:    {c_layout:?}",);
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {abi_cmd:?} failed, {output:?}").into());
    }

    Ok(String::from_utf8(output.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    (
        "WebKitContextMenuAction",
        Layout {
            size: size_of::<WebKitContextMenuAction>(),
            alignment: align_of::<WebKitContextMenuAction>(),
        },
    ),
    (
        "WebKitContextMenuClass",
        Layout {
            size: size_of::<WebKitContextMenuClass>(),
            alignment: align_of::<WebKitContextMenuClass>(),
        },
    ),
    (
        "WebKitContextMenuItemClass",
        Layout {
            size: size_of::<WebKitContextMenuItemClass>(),
            alignment: align_of::<WebKitContextMenuItemClass>(),
        },
    ),
    (
        "WebKitFrameClass",
        Layout {
            size: size_of::<WebKitFrameClass>(),
            alignment: align_of::<WebKitFrameClass>(),
        },
    ),
    (
        "WebKitHitTestResultClass",
        Layout {
            size: size_of::<WebKitHitTestResultClass>(),
            alignment: align_of::<WebKitHitTestResultClass>(),
        },
    ),
    (
        "WebKitHitTestResultContext",
        Layout {
            size: size_of::<WebKitHitTestResultContext>(),
            alignment: align_of::<WebKitHitTestResultContext>(),
        },
    ),
    (
        "WebKitScriptWorldClass",
        Layout {
            size: size_of::<WebKitScriptWorldClass>(),
            alignment: align_of::<WebKitScriptWorldClass>(),
        },
    ),
    (
        "WebKitURIRequestClass",
        Layout {
            size: size_of::<WebKitURIRequestClass>(),
            alignment: align_of::<WebKitURIRequestClass>(),
        },
    ),
    (
        "WebKitURIResponseClass",
        Layout {
            size: size_of::<WebKitURIResponseClass>(),
            alignment: align_of::<WebKitURIResponseClass>(),
        },
    ),
    (
        "WebKitUserMessageClass",
        Layout {
            size: size_of::<WebKitUserMessageClass>(),
            alignment: align_of::<WebKitUserMessageClass>(),
        },
    ),
    (
        "WebKitUserMessageError",
        Layout {
            size: size_of::<WebKitUserMessageError>(),
            alignment: align_of::<WebKitUserMessageError>(),
        },
    ),
    (
        "WebKitWebEditorClass",
        Layout {
            size: size_of::<WebKitWebEditorClass>(),
            alignment: align_of::<WebKitWebEditorClass>(),
        },
    ),
    (
        "WebKitWebFormManager",
        Layout {
            size: size_of::<WebKitWebFormManager>(),
            alignment: align_of::<WebKitWebFormManager>(),
        },
    ),
    (
        "WebKitWebFormManagerClass",
        Layout {
            size: size_of::<WebKitWebFormManagerClass>(),
            alignment: align_of::<WebKitWebFormManagerClass>(),
        },
    ),
    (
        "WebKitWebHitTestResultClass",
        Layout {
            size: size_of::<WebKitWebHitTestResultClass>(),
            alignment: align_of::<WebKitWebHitTestResultClass>(),
        },
    ),
    (
        "WebKitWebPageClass",
        Layout {
            size: size_of::<WebKitWebPageClass>(),
            alignment: align_of::<WebKitWebPageClass>(),
        },
    ),
    (
        "WebKitWebProcessExtensionClass",
        Layout {
            size: size_of::<WebKitWebProcessExtensionClass>(),
            alignment: align_of::<WebKitWebProcessExtensionClass>(),
        },
    ),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_BOLD", "27"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_COPY", "14"),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_COPY_AUDIO_LINK_TO_CLIPBOARD",
        "35",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_TO_CLIPBOARD",
        "7",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_URL_TO_CLIPBOARD",
        "8",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_COPY_LINK_TO_CLIPBOARD",
        "4",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_COPY_VIDEO_LINK_TO_CLIPBOARD",
        "34",
    ),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_CUSTOM", "10000"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_CUT", "15"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_DELETE", "17"),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_AUDIO_TO_DISK",
        "43",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_IMAGE_TO_DISK",
        "6",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_LINK_TO_DISK",
        "3",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_VIDEO_TO_DISK",
        "42",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_ENTER_VIDEO_FULLSCREEN",
        "38",
    ),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_FONT_MENU", "26"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_GO_BACK", "10"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_GO_FORWARD", "11"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_IGNORE_GRAMMAR", "25"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_IGNORE_SPELLING", "23"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_INPUT_METHODS", "19"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_INSERT_EMOJI", "44"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_INSPECT_ELEMENT", "31"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_ITALIC", "28"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_LEARN_SPELLING", "24"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_MEDIA_MUTE", "41"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PAUSE", "40"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PLAY", "39"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_NO_ACTION", "0"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_NO_GUESSES_FOUND", "22"),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_OPEN_AUDIO_IN_NEW_WINDOW",
        "33",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_OPEN_FRAME_IN_NEW_WINDOW",
        "9",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_OPEN_IMAGE_IN_NEW_WINDOW",
        "5",
    ),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK", "1"),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK_IN_NEW_WINDOW",
        "2",
    ),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_OPEN_VIDEO_IN_NEW_WINDOW",
        "32",
    ),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_OUTLINE", "30"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_PASTE", "16"),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_PASTE_AS_PLAIN_TEXT",
        "45",
    ),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_RELOAD", "13"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_SELECT_ALL", "18"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_SPELLING_GUESS", "21"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_STOP", "12"),
    (
        "(gint) WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_CONTROLS",
        "36",
    ),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_LOOP", "37"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_UNDERLINE", "29"),
    ("(gint) WEBKIT_CONTEXT_MENU_ACTION_UNICODE", "20"),
    ("(guint) WEBKIT_HIT_TEST_RESULT_CONTEXT_DOCUMENT", "2"),
    ("(guint) WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE", "32"),
    ("(guint) WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE", "8"),
    ("(guint) WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK", "4"),
    ("(guint) WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA", "16"),
    ("(guint) WEBKIT_HIT_TEST_RESULT_CONTEXT_SCROLLBAR", "64"),
    ("(guint) WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION", "128"),
    ("(gint) WEBKIT_USER_MESSAGE_UNHANDLED_MESSAGE", "0"),
];
